import telebot
import config
from ya_gpt import ask_gpt
from database import *
from vallidators import *
from SpeechKit import *
import logging
from creds import get_bot_token

bot = telebot.TeleBot(get_bot_token())

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt",
    filemode="w",
)
u_data = []
@bot.message_handler(commands=['start'])
def start(message):
    u_id = message.chat.id
    if len(u_data) >= MAX_USERS:
        bot.send_message(u_id, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    else:
        if u_id not in u_data:
            u_data.append(u_id)
    print(u_data)
    bot.send_message(u_id, '–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ò–ò'
                                      ' –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–≤–æ–∏ '
                                      '–≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ –∫–∏–¥–∞–µ—à—å üòâ')

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—â–µ–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç."
                                           "–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ SpeechKit —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å"
                                           "–∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç: /stt –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ: /tts")

@bot.message_handler(commands=['debug'])
def debug(message):
    with open("logs.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=['tts'])
def tts_handler(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç, –∞ —è –µ–≥–æ –æ–∑–≤—É—á—É!')
    create_table()
    bot.register_next_step_handler(message, proccess_tts)

def proccess_tts(message):
    u_id = message.chat.id
    text = message.text

    if message.content_type != 'text':
        bot.send_message(u_id, '–ü–æ–∫–∞ —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏—à—å —Å —Ç–µ–∫—Å—Ç–æ–º, –º–æ–∂–Ω–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞ :)')
        return
    if len(text) > MAX_LEN:
        bot.send_message(u_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —É–∫–æ—Ä–æ—Ç–∏ –µ–≥–æ –ø–ª–∏–∑')

    text_symbol = is_tts_symbol_limit(message, text)
    if text_symbol is None:
        return
    insert_row(u_id, text, text_symbol)

    status, content = tts(text)

    if status:
        bot.send_voice(u_id, content)
    else:
        bot.send_message(u_id, content)

def is_tts_symbol_limit(message, text):
    user_id = message.from_user.id
    text_symbols = len(text)

    all_symbols = count_all_symbol(user_id) + text_symbols

    if all_symbols >= MAX_USER_TTS_SYMBOLS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit TTS {MAX_USER_TTS_SYMBOLS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {all_symbols} —Å–∏–º–≤–æ–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_TTS_SYMBOLS - all_symbols}"
        bot.send_message(user_id, msg)
        return None

    if text_symbols >= MAX_TTS_SYMBOLS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SpeechKit TTS –Ω–∞ –∑–∞–ø—Ä–æ—Å {MAX_TTS_SYMBOLS}, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {text_symbols} —Å–∏–º–≤–æ–ª–æ–≤"
        bot.send_message(user_id, msg)
        return None
    return len(text)

@bot.message_handler(commands=['stt'])
def stt_handler(message):
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª!')
    bot.register_next_step_handler(message, process_stt)

def process_stt(message):
    u_id = message.chat.id
    if not message.voice:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —ç—Ç–æ –∫–∞–∫ –Ω–∏–∫–∞–∫ –º–æ—è —Ñ–∏—à–∫–∞ :) ")
        bot.register_next_step_handler(message, process_stt)

    stt_blocks = is_stt_block_limit(message, message.voice.duration)
    if not stt_blocks:
        bot.send_message(u_id, "–õ–∏–±–æ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–∏–±–æ —Ç—ã –∑–∞–ø–∏—Å–∞–ª[–∞] –ø—É—Å—Ç–æ–µ "
                               "–∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        bot.register_next_step_handler(message, process_stt)

    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)
    status, text = stt(file)

    if status:
        insert_row(u_id, text, 'stt_blocks', stt_blocks)
        bot.send_message(u_id, text, reply_to_message_id=message.id)
    else:
        bot.send_message(u_id, text)

def is_stt_block_limit(message, duration):
    user_id = message.from_user.id
    audio_blocks = math.ceil(duration / 15)

    all_blocks = count_all_blocks(user_id)

    if all_blocks is None:
        all_blocks = 0

    all_blocks += audio_blocks

    if duration >= 30:
        msg = "SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥"
        bot.send_message(user_id, msg)
        return None

    if all_blocks >= MAX_USER_STT_BLOCKS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit STT {MAX_USER_STT_BLOCKS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {all_blocks} –±–ª–æ–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_STT_BLOCKS - all_blocks}"
        bot.send_message(user_id, msg)
        return None

    return audio_blocks

@bot.message_handler(content_types=['voice'])
def handle_voice(message: telebot.types.Message):
    user_id = message.from_user.id
    try:
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤
        status_check_users, error_message = check_number_of_users(user_id)
        logging.info(f"error_message - {error_message}")
        if not status_check_users:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ - {error_message}")
            bot.register_next_step_handler(handle_voice)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—É–¥–∏–æ–±–ª–æ–∫–∞–º
        stt_blocks = is_stt_block_limit(message, message.voice.duration)
        logging.info(f"stt blocks - {stt_blocks}")
        logging.info(f"error_message - {error_message}")
        if error_message:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ - {error_message}. –õ–∏–±–æ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–∏–±–æ —Ç—ã –∑–∞–ø–∏—Å–∞–ª[–∞] –ø—É—Å—Ç–æ–µ "
                                   "–∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
            logging.info(f'error_message - {error_message}')
            return

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—Ö—É
        file_id = message.voice.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        status_stt, stt_text = speech_to_text(file)
        logging.info(f"file_id - {file_id}, file_info - {file_info}, status_stt - {status_stt}, stt_text - {stt_text}")
        if not status_stt:
            bot.send_message(user_id, stt_text)
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
        add_message(user_id=user_id, full_message=[stt_text, 'user', 0, 0, stt_blocks])

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å gpt —Ç–æ–∫–µ–Ω—ã
        last_messages, total_spent_tokens = select_n_last_messages(user_id, config.COUNT_LAST_MSG)
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –æ—Ç–ø—Ä–∞–≤—è–ª–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≥–ø—Ç
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        # –ø—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –æ—à–∏–±–∫–∏
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return
        total_gpt_tokens += tokens_in_answer

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ SpeechKit
        tts_symbols = is_tts_symbol_limit(message, answer_gpt)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≥–ø—Ç –≤ –±–¥
        add_message(user_id=user_id, full_message=[answer_gpt, 'assistant', total_gpt_tokens, tts_symbols, 0])

        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –∏–∑ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç + –æ—Ç–ø—Ä–∞–≤–∫–∞
        status_tts, voice_response = text_to_speech(answer_gpt)
        if status_tts:
            bot.send_voice(user_id, voice_response, reply_to_message_id=message.id)
        else:
            bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)

    except Exception as e:
        logging.error(e)
        bot.send_message(user_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        user_id = message.from_user.id

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –º–µ—Å—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –Ω—å—é —é–∑–µ—Ä–∞
        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(user_id, error_message)
            return

        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Ä–æ–ª—å –≤ –±–¥
        full_user_message = [message.text, 'user', 0, 0, 0]
        add_message(user_id=user_id, full_message=full_user_message)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ø—Ç —Ç–æ–∫–µ–Ω–æ–≤
        # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        last_messages, total_spent_tokens = select_n_last_messages(user_id, config.COUNT_LAST_MSG)
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã + —Ç–æ–∫–µ–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ + –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)
        if error_message:
            bot.send_message(user_id, error_message)
            return

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≥–ø—Ç
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return
        # —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ GPT
        total_gpt_tokens += tokens_in_answer

        # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≥–ø—Ç + –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–¥
        full_gpt_message = [answer_gpt, 'assistant', total_gpt_tokens, 0, 0]
        add_message(user_id=user_id, full_message=full_gpt_message)

        bot.send_message(user_id, answer_gpt, reply_to_message_id=message.id)  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–º
    except Exception as e:
        logging.error(e)
        bot.send_message(message.from_user.id, "–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ")

@bot.message_handler(func=lambda: True)
def handler(message):
    bot.send_message(message.from_user.id, "–ü–æ–∫–∞ —è —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                                           "–ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –∏ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É!)")

if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    create_database()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    bot.infinity_polling()